#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum Register {
    A,
    B,
    C,
    D,
    E,
    F,
    H,
    L,
    SPHi,
    SPLo,
    PCHi,
    PCLo,
    SpecialLoadHL,
    Empty,
}

pub fn nth_register(nth: u8) -> Register {
    match nth {
        0x0 => Register::B,
        0x1 => Register::C,
        0x2 => Register::D,
        0x3 => Register::E,
        0x4 => Register::H,
        0x5 => Register::L,
        0x6 => Register::SpecialLoadHL,
        0x7 => Register::A,
        _ => Register::Empty,
    }
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum FlagBit {
    Zero,
    AddSub,
    HalfCarry,
    Carry,
}

pub fn flag_picker(flag: FlagBit) -> u8 {
    match flag {
        FlagBit::Zero => 1 << 7,
        FlagBit::AddSub => 1 << 6,
        FlagBit::HalfCarry => 1 << 5,
        FlagBit::Carry => 1 << 4,
    }
}

#[derive(Debug, PartialEq, Eq)]
pub enum Opcode {
    Noop,
    Stop,
    Halt,
    Load16(Register, Register, u16),
    Load8(Register, u8),
    LoadReg(Register, Register),
    LoadAddress(Register, u16),
    LoadAddressFromRegisters(Register, Register, Register),
    LoadRegisterIntoMemory(Register, Register, Register),
    LoadRamCIntoA,
    LoadHLIntoSP,
    SaveRegister(Register, u16),
    SaveAIntoRamC,
    SaveSP(u16),
    LoadHLInc,
    SaveHLInc,
    LoadHLDec,
    SaveHLDec,
    SaveHLSP(i8),
    AddHL(Register, Register),
    Inc(Register),
    IncPair(Register, Register),
    Dec(Register),
    DecPair(Register, Register),
    Jump(u16),
    JumpCond(FlagBit, bool, u16),
    JumpRelative(i8),
    JumpRelativeCond(FlagBit, bool, i8),
    JumpHL,
    DisableInterrupts,
    EnableInterrupts,
    Push(Register, Register),
    Pop(Register, Register),
    Call(u16),
    CallCond(FlagBit, bool, u16),
    Return,
    ReturnCond(FlagBit, bool),
    ReturnInterrupt,
    Or(Register),
    And(Register),
    Xor(Register),
    Cp(Register),
    Add(Register),
    AddCarry(Register),
    AddSP(i8),
    Sub(Register),
    SubCarry(Register),
    AndValue(u8),
    OrValue(u8),
    XorValue(u8),
    CpValue(u8),
    AddValue(u8),
    AddCarryValue(u8),
    SubValue(u8),
    SubCarryValue(u8),
    RLC(Register),
    RRC(Register),
    RL(Register),
    RR(Register),
    RLCA,
    RRCA,
    RLA,
    RRA,
    SLA(Register),
    SRA(Register),
    Swap(Register),
    SRL(Register),
    Bit(Register, u8),
    Reset(Register, u8),
    Set(Register, u8),
    CPL,
    CCF,
    SCF,
    Restart(u16),
    DAA,
    UnimplementedOpcode(u8),
}

#[derive(Debug, PartialEq, Eq)]
pub enum MemoryBankType {
    ROM,
    MBC1,
    MBC2,
    MMM01,
    MBC3,
    MBC4,
    MBC5,
}
